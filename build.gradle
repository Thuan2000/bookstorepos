import java.sql.DriverManager

plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'com.thuannguyen'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.thuannguyen.bookstorepos'
    mainClass = 'com.thuannguyen.bookstorepos.Main'
}

javafx {
    version = '17.0.6'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    // MySQL JDBC Driver
    implementation ('mysql:mysql-connector-java:8.0.23')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

task setupDatabase() {
    doLast {
        // Set up the class loader with the runtime classpath
        URLClassLoader classLoader = GroovyObject.class.classLoader
        project.configurations.runtimeClasspath.each { classLoader.addURL(it.toURI().toURL()) }

        // Load JDBC driver
        Class.forName('com.mysql.cj.jdbc.Driver', true, classLoader)

        // Configuration
        def url = 'jdbc:mysql://localhost:3306/bookstore'
        def user = 'thuan'
        def password = '123!@#'

        // Connect to the database
        def connection = DriverManager.getConnection(url, user, password)

        // Execute SQL scripts
        def schemaScript = new File('src/main/resources/db/schema.sql')
        def dataScript = new File('src/main/resources/db/data.sql')
        connection.createStatement().execute(schemaScript.text)
        connection.createStatement().execute(dataScript.text)

        // Close the connection
        connection.close()
    }
}